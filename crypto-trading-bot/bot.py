
import logging
from binance.client import Client
from binance.exceptions import BinanceAPIException
from config import API_KEY, API_SECRET, SYMBOL, TIMEFRAME, QUANTITY
from functions import send_telegram_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance
client = Client(API_KEY, API_SECRET)

def check_conditions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
        candles = client.get_klines(symbol=SYMBOL, interval=TIMEFRAME, limit=100)
        last_close = float(candles[-1][4])  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏

        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –ø–æ–∫—É–ø–∞–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∞ 2% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
        high_prices = [float(candle[2]) for candle in candles]
        max_price = max(high_prices[-10:])  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
        if last_close < max_price * 0.98:  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–∏–∂–µ –Ω–∞ 2%
            return "BUY"
        else:
            return "HOLD"

    except BinanceAPIException as e:
        logger.error(f"Binance API Error: {e}")
        return "ERROR"

def execute_trade(signal):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ Binance"""
    try:
        if signal == "BUY":
            order = client.create_order(
                symbol=SYMBOL,
                side=Client.SIDE_BUY,
                type=Client.ORDER_TYPE_MARKET,
                quantity=QUANTITY
            )
            logger.info(f"–ö—É–ø–ª–µ–Ω–æ {QUANTITY} {SYMBOL}")
            send_telegram_message(f"üü¢ –ö—É–ø–ª–µ–Ω–æ {QUANTITY} {SYMBOL} –ø–æ —Ü–µ–Ω–µ {order['fills'][0]['price']}")
            return order
    except Exception as e:
        logger.error(f"Trade Error: {e}")
        return None

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    signal = check_conditions()
    if signal == "BUY":
        execute_trade(signal)
