import logging
import time
from binance.client import Client
from binance.exceptions import BinanceAPIException, BinanceOrderException
from config import API_KEY, API_SECRET, SYMBOL, TIMEFRAME, QUANTITY, TESTNET_MODE, BINANCE_API_URL
from functions import send_telegram_message

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Binance —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
try:
    client = Client(
        api_key=API_KEY,
        api_secret=API_SECRET,
        testnet=TESTNET_MODE,
        requests_params={'base_url': BINANCE_API_URL}
    )
    logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {'Testnet' if TESTNET_MODE else 'Real'} Binance API")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance API: {e}")
    exit(1)

def get_current_price() -> float:
    """–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞"""
    try:
        ticker = client.get_symbol_ticker(symbol=SYMBOL)
        return float(ticker['price'])
    except BinanceAPIException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return 0.0

def check_conditions() -> str:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        candles = client.get_klines(
            symbol=SYMBOL,
            interval=TIMEFRAME,
            limit=100
        )
        
        if not candles:
            logger.warning("–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π")
            return "HOLD"

        # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω
        last_close = float(candles[-1][4])
        high_prices = [float(candle[2]) for candle in candles[-10:]]  # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–≤–µ—á–µ–π
        max_price = max(high_prices) if high_prices else last_close

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞: —É—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º—ã –∏ RSI
        current_price = get_current_price()
        if current_price == 0:
            return "ERROR"

        # –£—Å–ª–æ–≤–∏–µ –¥–ª—è BUY
        if last_close < max_price * 0.98:  # –¶–µ–Ω–∞ –Ω–∏–∂–µ 2% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
            logger.info(f"–°–∏–≥–Ω–∞–ª BUY: —Ü–µ–Ω–∞ {last_close} < {max_price * 0.98}")
            return "BUY"
        
        return "HOLD"

    except BinanceAPIException as e:
        logger.error(f"API Error in check_conditions: {e}")
        return "ERROR"
    except Exception as e:
        logger.error(f"Unexpected error in check_conditions: {e}")
        return "ERROR"

def execute_trade(signal: str) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞"""
    if signal != "BUY":
        return None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        balance = client.get_asset_balance(asset='USDT' if 'USDT' in SYMBOL else 'BTC')
        free_balance = float(balance['free'])
        
        if free_balance < float(QUANTITY) * get_current_price():
            logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–¥–µ–ª–∫–∏")
            send_telegram_message(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {QUANTITY} {SYMBOL}")
            return None

        # –°–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        order = client.create_order(
            symbol=SYMBOL,
            side=Client.SIDE_BUY,
            type=Client.ORDER_TYPE_MARKET,
            quantity=QUANTITY,
            recvWindow=60000  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏
        exec_price = float(order['fills'][0]['price'])
        logger.info(f"–ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {QUANTITY} {SYMBOL} –ø–æ —Ü–µ–Ω–µ {exec_price}")
        send_telegram_message(
            f"üü¢ –ò—Å–ø–æ–ª–Ω–µ–Ω–æ: {QUANTITY} {SYMBOL} –ø–æ {exec_price}\n"
            f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {float(QUANTITY) * exec_price:.2f} USDT"
        )
        
        return order

    except BinanceOrderException as e:
        logger.error(f"Order Error: {e.status_code} - {e.message}")
        return None
    except Exception as e:
        logger.error(f"Unexpected trade error: {e}")
        return None

def main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏"""
    logger.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ {'—Ç–µ—Å—Ç–æ–≤–æ–º' if TESTNET_MODE else '—Ä–µ–∞–ª—å–Ω–æ–º'} —Ä–µ–∂–∏–º–µ")
    send_telegram_message(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ({SYMBOL} {TIMEFRAME})")

    while True:
        try:
            signal = check_conditions()
            
            if signal == "BUY":
                execute_trade(signal)
            elif signal == "ERROR":
                send_telegram_message("üî¥ –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏")
                time.sleep(60)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
            sleep_time = {
                '1m': 60,
                '5m': 300,
                '15m': 900,
                '1h': 3600,
                '4h': 14400
            }.get(TIMEFRAME, 60)
            
            time.sleep(sleep_time)

        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            send_telegram_message("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
            break
        except Exception as e:
            logger.error(f"Critical error in main loop: {e}")
            time.sleep(300)

if __name__ == "__main__":
    main_loop()
